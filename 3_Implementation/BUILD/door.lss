
bin\Debug\door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000124  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b4  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000fb  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000008c  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
int main(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	DDRB=DDRB&0b11111101;//fd
  88:	a4 e2       	ldi	r26, 0x24	; 36
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e4 e2       	ldi	r30, 0x24	; 36
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	8c 93       	st	X, r24
	DDRC=DDRC|0b01000000;//40
  96:	a7 e2       	ldi	r26, 0x27	; 39
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e7 e2       	ldi	r30, 0x27	; 39
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8c 93       	st	X, r24
	while(1)
	{
if(PINB & 0b00000010)//02
  a4:	e3 e2       	ldi	r30, 0x23	; 35
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	82 70       	andi	r24, 0x02	; 2
  b0:	90 70       	andi	r25, 0x00	; 0
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	41 f0       	breq	.+16     	; 0xc6 <main+0x46>
	PORTC=PORTC|0b01000000;//40
  b6:	a8 e2       	ldi	r26, 0x28	; 40
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e8 e2       	ldi	r30, 0x28	; 40
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8c 93       	st	X, r24
  c4:	ef cf       	rjmp	.-34     	; 0xa4 <main+0x24>
		else
		PORTC=PORTC&0b10111111;//bf
  c6:	a8 e2       	ldi	r26, 0x28	; 40
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e8 e2       	ldi	r30, 0x28	; 40
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8f 7b       	andi	r24, 0xBF	; 191
  d2:	8c 93       	st	X, r24
  d4:	e7 cf       	rjmp	.-50     	; 0xa4 <main+0x24>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
